//Bismillah

#include<bits/stdc++.h>
using namespace std;

typedef long long ll;
typedef vector<int> vi;
typedef vector<ll> vl;
typedef vector<vi> vvi;
typedef vector<vl> vvl;
typedef pair<int,int> pii;
typedef pair<double, double> pdd;
typedef pair<ll, ll> pll;
typedef vector<pii> vpi;
typedef vector<pll> vpl;
typedef double dl;

#define pb push_back
#define f first
#define s second
#define mp make_pair
#define endl '\n'
#define all(a) (a).begin(),(a).end()
#define rev(a) reverse(a.begin(),a.end())
#define sz(x) (int)x.size()
#define mx_int_prime 999999937

const double pi = acos(-1);
const double eps = 1e-9;
const int inf = 2000000000;
const ll infLL = 9000000000000000000;
#define MOD 1000000007

#define mem(a,b) memset(a, b, sizeof(a) )
inline ll gcd ( ll a, ll b ) { return __gcd ( a, b ); }
inline ll lcm ( ll a, ll b ) { return a * ( b / gcd ( a, b ) ); }

#define fast() ios_base::sync_with_stdio(0);
#define fraction() cout<<fixed<<setprecision(10);

int dx[] = {0, 0, +1, -1};
int dy[] = {+1, -1, 0, 0};
//int dx[] = {+1, 0, -1, 0, +1, +1, -1, -1};
//int dy[] = {0, +1, 0, -1, +1, -1, +1, -1};

//debug//
template < typename F, typename S >
ostream& operator << ( ostream& os, const pair< F, S > & p ) {
            return os << "(" << p.first << ", " << p.second << ")";
}
template < typename T >
ostream &operator << ( ostream & os, const vector< T > &v ) {
            os << "{";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "}";
}
template < typename T >
ostream &operator << ( ostream & os, const set< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}
template < typename T >
ostream &operator << ( ostream & os, const multiset< T > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << *it;
                                            }
                    return os << "]";
}
template < typename F, typename S >
ostream &operator << ( ostream & os, const map< F, S > &v ) {
            os << "[";
                for(auto it = v.begin(); it != v.end(); ++it) {
                                if( it != v.begin() ) os << ", ";
                                        os << it -> first << " = " << it -> second ;
                                            }
                    return os << "]";
}
#define dbg(args...) do {cerr << #args << " : "; faltu(args); } while(0)
void faltu () {
            cerr << endl;
}
template <typename T>
void faltu( T a[], int n ) {
            for(int i = 0; i < n; ++i) cerr << a[i] << ' ';
                cerr << endl;
}
template <typename T, typename ... hello>
void faltu( T arg, const hello &... rest) {
            cerr << arg << ' ';
                faltu(rest...);
}
const int mx=1010;
char grid[mx][mx];
bool vis[mx][mx];
int ans,n,m;
bool isValid(int x, int y)
{
    if(x>=1&&x<=n&&y>=1&&y<=m&&grid[x][y]=='.') return true;
    return false;
}
void dfs(int x,int y)
{
    vis[x][y]=1;
    for(int i=0 ; i<4; i++)
    {
        int x1=x+dx[i];
        int y1=y+dy[i];
        if(isValid(x1,y1))
        {
            if(!vis[x1][y1]) dfs(x1,y1);
        }
    }
}
void solve()
{
    cin>>n>>m;
    for(int i=1; i<=n ; i++)
    {
        for(int j=1 ; j<=m ; j++)
        {
            cin>>grid[i][j];
        }
    }
    for(int i=1; i<=n ; i++)
    {
        for(int j=1; j<=m ; j++)
        {
            if(grid[i][j]=='.'&&vis[i][j]==0)
            {
                ans++;
                dfs(i,j);
            }
        }
    }
    cout<<ans<<"\n";
}
int main()
{
    fast();
    int tc=0;
    int t=1;
    while(t--)
    {
        // for case number 
        // tc++; solve(tc);
        //without case number 
        solve();
 
    }

}
//author::_mehedi_
